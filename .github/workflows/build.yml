name: Build Android APK

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-apk:
    runs-on: ubuntu-latest
    timeout-minutes: 90
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Set up Java JDK 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
    
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
    
    - name: Setup Flutter SDK
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.3'
        channel: 'stable'
        cache: true
    
    - name: Flutter Doctor
      run: flutter doctor -v
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flet==0.24.1
    
    - name: Accept Android licenses
      run: yes | flutter doctor --android-licenses || true
    
    - name: Cache Flutter packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.pub-cache
          ${{ runner.temp }}/flutter_*
        key: ${{ runner.os }}-flutter-${{ hashFiles('pubspec.yaml') }}
        restore-keys: |
          ${{ runner.os }}-flutter-
    
    - name: Build APK with timeout
      timeout-minutes: 75
      env:
        GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.workers.max=1 -Xmx4g"
        JAVA_OPTS: "-Xmx4g"
      run: |
        # Crear directorio de build si no existe
        mkdir -p build
        
        # Comando con timeout extendido
        timeout 4200 flet build apk \
          --project "DiarioPersonal" \
          --description "Diario personal con Flet" \
          --org com.diarioflet.app \
          --verbose \
          --no-rich-output
    
    - name: Find and list APK files
      run: |
        echo "🔍 Buscando archivos APK generados..."
        find . -name "*.apk" -type f -exec ls -lh {} \; || echo "No se encontraron APKs"
        
        echo "📁 Contenido del directorio build:"
        find ./build -type f -name "*.apk" 2>/dev/null || echo "No hay APKs en build/"
        
        echo "📂 Estructura completa del directorio:"
        find . -maxdepth 3 -type d | head -20
    
    - name: Upload APK artifact
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: diario-personal-apk-${{ github.run_number }}
        path: |
          build/**/*.apk
          **/*.apk
          ./**/*release*.apk
        if-no-files-found: warn
    
    - name: Create Release (if APK exists and main branch)
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      run: |
        APK_FILE=$(find . -name "*.apk" -type f | head -1)
        if [ -n "$APK_FILE" ]; then
          echo "APK encontrada: $APK_FILE"
          gh release create "v${{ github.run_number }}" \
            --title "Diario Personal v${{ github.run_number }}" \
            --notes "🚀 Nueva versión automática
            
            **📱 Instalación:**
            1. Descarga el archivo .apk
            2. Habilita 'Instalar desde fuentes desconocidas' en Android
            3. Instala la aplicación
            
            **🔧 Build #${{ github.run_number }}**
            - Commit: ${{ github.sha }}
            - Fecha: $(date)" \
            "$APK_FILE" || echo "Error creando release"
        else
          echo "No se encontró APK para crear release"
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}